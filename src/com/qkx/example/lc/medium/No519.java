package com.qkx.example.lc.medium;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;

/**
 * @author kaixin
 * @since 2022-04-15 15:38
 */
//There is an m x n binary grid matrix with all the values set 0 initially.
//Design an algorithm to randomly pick an index (i, j) where matrix[i][j] == 0 and
//flips it to 1. All the indices (i, j) where matrix[i][j] == 0 should be equally
//likely to be returned.
//
// Optimize your algorithm to minimize the number of calls made to the built-in
//random function of your language and optimize the time and space complexity.
//
// Implement the Solution class:
//
//
// Solution(int m, int n) Initializes the object with the size of the binary
//matrix m and n.
// int[] flip() Returns a random index [i, j] of the matrix where matrix[i][j] =
//= 0 and flips it to 1.
// void reset() Resets all the values of the matrix to be 0.
//
//
//
// Example 1:
//
//
//Input
//["Solution", "flip", "flip", "flip", "reset", "flip"]
//[[3, 1], [], [], [], [], []]
//Output
//[null, [1, 0], [2, 0], [0, 0], null, [2, 0]]
//
//Explanation
//Solution solution = new Solution(3, 1);
//solution.flip();  // return [1, 0], [0,0], [1,0], and [2,0] should be equally
//likely to be returned.
//solution.flip();  // return [2, 0], Since [1,0] was returned, [2,0] and [0,0]
//solution.flip();  // return [0, 0], Based on the previously returned indices,
//only [0,0] can be returned.
//solution.reset(); // All the values are reset to 0 and can be returned.
//solution.flip();  // return [2, 0], [0,0], [1,0], and [2,0] should be equally
//likely to be returned.
//
//
//
// Constraints:
//
//
// 1 <= m, n <= 10‚Å¥
// There will be at least one free cell for each call to flip.
// At most 1000 calls will be made to flip and reset.
//
// Related Topics Hash Table Math Reservoir Sampling Randomized üëç 293 üëé 89


//leetcode submit region begin(Prohibit modification and deletion)
public class No519 {

    /**
     * Áî® map ‰Ωú‰∏∫Êò†Â∞Ñ
     * Â∞ÜÊï∞ÁªÑ‰∫§Êç¢ËΩ¨Âåñ‰∏∫Êò†Â∞ÑÂÖ≥Á≥ªÂèòÊõ¥ÔºåËøôÊ†∑Âè™ÈúÄË¶ÅÁª¥Êä§Êï∞ÁªÑÂ§ßÂ∞èÔºå‰∏çÈúÄË¶ÅÁª¥Êä§Êï¥‰∏™Êï∞ÁªÑ
     * Âú®ÊãøÂÄºÁöÑÊó∂ÂÄôÔºåÊ≥®ÊÑèÂ§ÑÁêÜÊò†Â∞ÑÂÖ≥Á≥ª
     *
     * Ëß£Á≠îÊàêÂäü:
     * 	ÊâßË°åËÄóÊó∂:50 ms,ÂáªË¥•‰∫Ü69.03% ÁöÑJavaÁî®Êà∑
     * 	ÂÜÖÂ≠òÊ∂àËÄó:50.9 MB,ÂáªË¥•‰∫Ü36.28% ÁöÑJavaÁî®Êà∑
     */
    private static class Solution {

        private int m, n;
        private int size;

        private Random random;

        private Map<Integer, Integer> map;

        public Solution(int m, int n) {
            this.m = m;
            this.n = n;

            size = m * n;
            random = new Random();
            map = new HashMap<>();
        }

        public int[] flip() {
            int cur = random.nextInt(size);
            // Ëé∑ÂèñÂÆûÈôÖÁöÑÁºñÂè∑
            int ac = map.getOrDefault(cur, cur);
            // ÊõøÊç¢ÁºñÂè∑
            map.put(cur, map.getOrDefault(size - 1, size - 1));
            size--;
            int x = ac / n, y = ac - x * n;
            return new int[] {x, y};
        }

        public void reset() {
            size = m * n;
            map.clear();
        }
    }

    public static void main(String[] args) {
        Solution s = new Solution(2, 2);
        System.out.println(Arrays.toString(s.flip()));
        System.out.println(Arrays.toString(s.flip()));
        System.out.println(Arrays.toString(s.flip()));
        System.out.println(Arrays.toString(s.flip()));
    }

/**
 * Your Solution object will be instantiated and called as such:
 * Solution obj = new Solution(m, n);
 * int[] param_1 = obj.flip();
 * obj.reset();
 */
//leetcode submit region end(Prohibit modification and deletion)
}


